import BusyIndicator from "sap/ui/core/BusyIndicator";
import EventBus from "sap/ui/core/EventBus";
import Fragment from "sap/ui/core/Fragment";
import Controller from "sap/ui/core/mvc/Controller";
import UIComponent from "sap/ui/core/UIComponent";
import AppComponent from "../Component";
import Model from "sap/ui/model/Model";
import JSONModel from "sap/ui/model/json/JSONModel";
import ResourceModel from "sap/ui/model/resource/ResourceModel";
import ResourceBundle from "sap/base/i18n/ResourceBundle";
import Router from "sap/ui/core/routing/Router";
import History from "sap/ui/core/routing/History";
import formatter from "../model/formatter";

let _fragments: any = [];

/**
 * @namespace <%= props.appId %>.controller
 */
export default abstract class BaseController extends Controller {

    formatter(): typeof formatter {
        return formatter;
    }

    public onInit(): void { }

    /**
     * Convenience method for accessing the component of the controller's view.
     * @returns The component of the controller's view
     */
    public getOwnerComponent(): AppComponent {
        return (super.getOwnerComponent() as AppComponent);
    }

    /**
     * Convenience method to get the components' router instance.
     * @returns The router instance
     */
    public getRouter(): Router {
        return UIComponent.getRouterFor(this);
    }

    /**
     * Convenience method for getting the i18n resource bundle of the component.
     * @returns The i18n resource bundle of the component
     */
    public getResourceBundle(): ResourceBundle | Promise<ResourceBundle> {
        const oModel = this.getOwnerComponent().getModel("i18n") as ResourceModel;
        return oModel.getResourceBundle();
    }

    /**
	 * Convenience method for getting the view model by name in every controller of the application.
	 * @param [sName] The model name
	 * @returns The model instance
	 */
	public getModel(sName?: string) : Model {
		return this.getView().getModel(sName);
	}

    /**
	 * Convenience method for setting the view model in every controller of the application.
	 * @param oModel The model instance
	 * @param [sName] The model name
	 * @returns The current base controller instance
	 */
	public setModel(oModel: Model, sName?: string) : BaseController {
		this.getView().setModel(oModel, sName);
		return this;
	}

    /**
	 * Convenience method for triggering the navigation to a specific target.
	 * @public
	 * @param sName Target name
	 * @param [oParameters] Navigation parameters
	 * @param [bReplace] Defines if the hash should be replaced (no browser history entry) or set (browser history entry)
	 */
	public navTo(sName: string, oParameters?: object, bReplace?: boolean) : void {
		this.getRouter().navTo(sName, oParameters, undefined, bReplace);
	}

    /**
	 * Convenience event handler for navigating back.
	 * It there is a history entry we go one step back in the browser history
	 * If not, it will replace the current entry of the browser history with the master route.
	 */
	public onNavBack(): void {
		const sPreviousHash = History.getInstance().getPreviousHash();
		if (sPreviousHash !== undefined) {
			window.history.go(-1);
		} else {
			this.getRouter().navTo("main", {}, undefined, true);
		}
	}

    public getEventBus(): EventBus {
        return this.getOwnerComponent().getEventBus();
    }

    async i18n(sProperty: string) {
        return (await this.getResourceBundle()).getText(sProperty);
    }

    public showBusyIndicator(): void {
        return BusyIndicator.show();
    }

    public hideBusyIndicator(): void {
        return BusyIndicator.hide();
    }

    public onNavigate(oEvent: Event) {
        //oEvent.preventDefault();
    }

    async openFragment(sName: string, model: JSONModel, updateModelAlways: boolean, callback: any, data: {}) {
        if (sName.indexOf(".") > 0) {
            var aViewName = sName.split(".");
            sName = sName.substr(sName.lastIndexOf(".") + 1);
        } else {
            aViewName = this.getView().getViewName().split(".");
        }
        aViewName.pop();
        var sViewPath = aViewName.join(".");
        if (sViewPath.toLowerCase().indexOf("fragment") > 0) {
            sViewPath += ".";
        } else {
            sViewPath += ".fragment.";
        }
        var id = this.getView().getId() + "-" + sName;
        if (!_fragments[id]) {
            //create controller
            var sControllerPath = sViewPath.replace("view", "controller");
            let controller: Controller;
            try {
                controller = await Controller.create({
                    name: sControllerPath + sName
                });
            } catch (ex) {
                controller = this;
            }
            _fragments[id] = {
                fragment: await Fragment.load({
                    id: id,
                    name: sViewPath + sName,
                    controller: controller
                }),
                controller: controller
            };
            if (model && !updateModelAlways) {
                _fragments[id].fragment.setModel(model);
            }
            this.getView().addDependent(_fragments[id].fragment);
        }
        var fragment = _fragments[id].fragment;
        if (model && updateModelAlways) {
            fragment.setModel(model);
        }
        if (_fragments[id].controller && _fragments[id].controller !== this) {
            _fragments[id].controller.onBeforeShow(this, fragment, callback, data);
        }
        setTimeout(function () {
            fragment.open();
        }, 100);
    }

    closeFragments() {
        for (var f in _fragments) {
            if (_fragments[f]["fragment"] && _fragments[f].fragment["isOpen"] && _fragments[f].fragment.isOpen()) {
                _fragments[f].fragment.close();
            }
        }
    }

    /*fnMetadataLoadingFailed() {
        var dialog = new Dialog({
            title: 'Error',
            type: 'Message',
            state: 'Error',
            content: new Text({
                text: 'Metadata loading failed. Please refresh you page.'
            }),
            beginButton: new Button({
                text: 'OK',
                press: function () {
                    dialog.close();
                }
            }),
            afterClose: function () {
                dialog.destroy();
            }
        });

        dialog.open();
    }*/

    /*updateModel: function (oModel, data, change) {
        if (change == "added") {
            oModel.getData().push(data);
        } else if (change == "modified") {
            var index = oModel.getData().map(function (data) {
                return data.id;
            }).indexOf(data.id);
            oModel.getData()[index] = data;
        } else if (change == "removed") {
            var index = oModel.getData().map(function (data) {
                return data.id;
            }).indexOf(data.id);
            oModel.getData().splice(index, 1);
        }
        oModel.refresh(true);
    }*/

    /*getFragmentControlById(parent, id) {
        var latest = this.getMetadata().getName().split(".")[this.getMetadata().getName().split(".").length - 1];
        return sap.ui.getCore().byId(parent.getView().getId() + "-" + latest + "--" + id);
    }*/
}