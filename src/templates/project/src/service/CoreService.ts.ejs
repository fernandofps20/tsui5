import Object from "sap/ui/base/Object";

/**
 * @namespace <%= props.appId %>.service
 */
export default abstract class Service extends Object {
    http(url: string): any {
        const core = {
            XMLHttpRequest: async function (method: string, url: string, headers: [], args: []) {
                return JSON.parse(await new Promise(function (resolve, reject) {
                    const client = new XMLHttpRequest();
                    let uri = url;
                    let data: any;
                    
                    if (args && method === 'GET') {
                        uri += '?';
                        let argcount = 0;
                        for (let key in args) {
                            if (args.hasOwnProperty(key)) {
                                if (argcount++) {
                                    uri += '&';
                                }
                                uri += encodeURIComponent(key) + '=' + encodeURIComponent(args[key]);
                            }
                        }
                    }

                    if (args && (method === 'POST' || method === 'PUT')) {
                        for (let keyp in args) {
                            if (args.hasOwnProperty(keyp)) {
                                data[keyp] = args[keyp];
                            }
                        }
                    }

                    client.open(method, uri);
                    if (method === 'POST' || method === 'PUT') {
                        client.setRequestHeader("accept", "application/json");
                        client.setRequestHeader("content-type", "application/json;charset=UTF-8;IEEE754Compatible=true");
                    }

                    for (let keyh in headers) {
                        if (headers.hasOwnProperty(keyh)) {
                            client.setRequestHeader(keyh, headers[keyh]);
                        }
                    }

                    data
                        ? client.send(JSON.stringify(data))
                        : client.send();

                    client.onload = function () {
                        this.status === 200 || this.status === 201 || this.status === 204
                            ? resolve(this.response)
                            : reject(this.statusText);
                    };

                    client.onerror = function () {
                        reject(this.statusText);
                    };
                }));
            }
        };
        return {
            'get': function (headers: [], args: []) {
                return core.XMLHttpRequest('GET', url, headers, args);
            },
            'post': function (headers: [], args: []) {
                return core.XMLHttpRequest('POST', url, headers, args);
            },
            'put': function (headers: [], args: []) {
                return core.XMLHttpRequest('PUT', url, headers, args);
            },
            'delete': function (headers: [], args: []) {
                return core.XMLHttpRequest('DELETE', url, headers, args);
            }
        };
    }
}